install.packages(c("CDM", "DescTools", "fansi", "icd", "ipred", "JuliaCall", "lme4", "mirt", "pkgconfig", "processx", "rattle", "RcppArmadillo", "rlang", "rpart.plot", "sandwich", "stringi"))
install.packages(c("icd", "lme4", "stringi"))
install.packages(c("icd", "lme4", "stringi", "VGAM", "XML"))
install.packages(c("callr", "car", "chron", "clue"))
install.packages(c("digest", "doBy", "Epi", "epiR"))
install.packages(c("jomo", "later", "lme4", "micemd", "plotrix", "R.rsp"))
install.packages(c("R.utils", "stringi", "VGAM", "wordcloud", "XML"))
install.packages(c("stringi", "tinytex", "xtable", "xts"))
install.packages(c("digest", "icd", "plotmo", "pls", "stringi", "xts"))
install.packages(c("ape", "asbio", "carData", "CDM", "cli", "commonmark"))
install.packages(c("CDM", "commonmark", "covr", "data.table", "digest", "expm", "flexclust", "htmlwidgets"))
install.packages(c("later", "lavaan", "magic", "maptools", "MCMCpack", "miceadds", "nloptr"))
install.packages(c("OpenMx", "optimx", "pkgbuild", "pROC", "robustbase", "semTools"))
install.packages(c("spData", "stringi", "TAM", "TTR", "units", "webshot", "xts", "zoo"))
install.packages(c("CDM", "commonmark", "data.table", "nloptr", "stringi", "TAM"))
install.packages(c("antiword", "CDM", "coda", "commonmark", "data.table", "digest", "evaluate", "fansi", "gamlss", "gamlss.data", "gamlss.dist", "magick", "mime", "nloptr", "OpenMx", "plotrix", "pmml", "R6", "Rcpp", "rstudioapi", "rticles", "StanHeaders", "stringi", "TAM"))
install.packages(c("digest", "rticles", "stringi"))
install.packages(c("digest", "rticles", "stringi", "sysfonts", "tidyselect"))
install.packages(c("digest", "stringi", "sysfonts", "tidyselect"))
install.packages(c("dimRed", "lintr", "Rcpp", "rgeos", "roxygen2"))
install.packages("dimRed")
install.packages(c("caret", "dimRed", "fishmethods", "FSA", "haven", "icd", "labelled", "lava", "mclust", "micemd", "openssl", "plotmo", "questionr", "RcppEigen", "readr", "recipes", "rio", "rpart.plot", "sirt", "survival", "tseries"))
install.packages(c("arulesViz", "broom", "processx", "testit", "units", "visNetwork"))
install.packages(c("markdown", "processx", "units"))
install.packages(c("backports", "callr", "CDM", "classInt", "ddalpha", "gamlss.dist", "httpuv", "httr", "hunspell", "jsonlite", "knitr", "markdown", "miceadds", "pdftools", "pillar", "ps", "quantreg", "readr", "readxl", "sf", "slam", "spam", "StanHeaders", "survey", "TAM", "tm"))
install.packages(c("AER", "BH", "class", "ddalpha", "deldir", "earth", "gclus", "git2r", "hmeasure", "htmlTable", "JuliaCall", "mitml", "plotmo", "prais", "sirt", "spData", "tibble", "vdiffr"))
install.packages(c("BH", "ddalpha", "deldir", "gclus", "git2r", "htmlTable", "mitml", "plotmo", "prais", "sirt", "tibble", "vdiffr"))
install.packages(c("asbio", "checkmate", "ddalpha", "deldir", "git2r", "RANN", "rlang", "rstudioapi", "sirt", "tibble"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
setwd("C:/Users/nunes/AI/ml/Health-analytics/cvi")
vein <- read.csv("vein.csv", sep = ";")
vein <- read.csv("vein.csv", sep = ";")
str(vein)
summary(vein)
names(vein)
vein <- read.csv("vein.csv", sep = ";")
names(vein)
library(FSA)
Summarize(age);
Summarize(vein$age);
Summarize(vein$bmi);
Summarize(vein$abd_circum);
Summarize(vein$fsj);
Summarize(vein$sv)
shapiro.test(vein$age);
shapiro.test(vein$bmi);
shapiro.test(vein$abd_circum);
shapiro.test(vein$fsj);
shapiro.test(vein$sv)
hist(vein$age);
hist(vein$bmi);
hist(vein$abd_circum);
hist(vein$fsj);
hist(vein$sv)
shapiro.test()
table(vein$sex);
table(vein$side);
table(vein$ceap);
table(vein$ceapc);
table(vein$bmic);
barplot(vein$ceap)
barplot(table(vein$ceap))
barplot(table(vein$ceap), color = "blue")
barplot(table(vein$ceap), col = "blue")
# To analyze the relationship between body mass index and CEAP classification
kruskal.test(vein$bmi, vein$ceap)
# To analyze the relationship between body mass index and CEAP classification
tapply(vein$bmi, vein$ceap, summary)
kruskal.test(vein$bmi, vein$ceap)
kruskal.test(vein$abd_circum, vein$ceap)
dunnTest(vein$bmi, vein$ceap)
dunnTest(vein$abd_circum, vein$ceap)
tapply(vein$abd_circum, vein$ceap, summary)
tapply(vein$bmi, vein$ceapc, summary)
wilcox.test(vein$bmi, vein$ceapc)
wilcox.test(vein$bmi ~ vein$ceapc)
tapply(vein$abd_circum, vein$ceap, Summarize)
tapply(vein$abd_circum, vein$ceap, summary)
tapply(vein$abd_circum, vein$ceap, Summarize)
wilcox.test(vein$abd_circum ~ vein$ceapc)
tapply(vein$abd_circum, vein$ceapc, Summarize)
