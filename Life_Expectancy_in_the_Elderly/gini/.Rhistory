install.packages(c("CDM", "DescTools", "fansi", "icd", "ipred", "JuliaCall", "lme4", "mirt", "pkgconfig", "processx", "rattle", "RcppArmadillo", "rlang", "rpart.plot", "sandwich", "stringi"))
install.packages(c("icd", "lme4", "stringi"))
install.packages(c("icd", "lme4", "stringi", "VGAM", "XML"))
install.packages(c("callr", "car", "chron", "clue"))
install.packages(c("digest", "doBy", "Epi", "epiR"))
install.packages(c("jomo", "later", "lme4", "micemd", "plotrix", "R.rsp"))
install.packages(c("R.utils", "stringi", "VGAM", "wordcloud", "XML"))
install.packages(c("stringi", "tinytex", "xtable", "xts"))
install.packages(c("digest", "icd", "plotmo", "pls", "stringi", "xts"))
install.packages(c("ape", "asbio", "carData", "CDM", "cli", "commonmark"))
install.packages(c("CDM", "commonmark", "covr", "data.table", "digest", "expm", "flexclust", "htmlwidgets"))
install.packages(c("later", "lavaan", "magic", "maptools", "MCMCpack", "miceadds", "nloptr"))
install.packages(c("OpenMx", "optimx", "pkgbuild", "pROC", "robustbase", "semTools"))
install.packages(c("spData", "stringi", "TAM", "TTR", "units", "webshot", "xts", "zoo"))
install.packages(c("CDM", "commonmark", "data.table", "nloptr", "stringi", "TAM"))
install.packages(c("antiword", "CDM", "coda", "commonmark", "data.table", "digest", "evaluate", "fansi", "gamlss", "gamlss.data", "gamlss.dist", "magick", "mime", "nloptr", "OpenMx", "plotrix", "pmml", "R6", "Rcpp", "rstudioapi", "rticles", "StanHeaders", "stringi", "TAM"))
install.packages(c("digest", "rticles", "stringi"))
install.packages(c("digest", "rticles", "stringi", "sysfonts", "tidyselect"))
install.packages(c("digest", "stringi", "sysfonts", "tidyselect"))
install.packages(c("dimRed", "lintr", "Rcpp", "rgeos", "roxygen2"))
install.packages(c("dplyr", "lme4"))
# dell analytics
setwd("C:/Users/nunes/AI/ml/Health-analytics/Life_Expectancy_in_the_Elderly/gini")
library(FSA)
library(reshape)
library(prais)
source('utils.R')
gini <- read.csv("gini.csv", sep = ";")
colnames(gini)
gini <- read.csv("gini.csv", sep = ";")
# dell analytics
setwd("C:/Users/nunes/AI/ml/Health-analytics/Life_Expectancy_in_the_Elderly/gini")
gini <- read.csv("gini.csv", sep = ";")
colnames(gini)
states <- colnames(gini)
states
class(states)
states <- colnames(gini)[2:]
states
states[2:]
states[2:29]
states <- states[2:29]
states
class(states)
for (state in states){
print(state)
}
for (state in states){
print(gine$state)
}
for (state in states){
print(head(gini$state,1))
}
attach(gini)
states <- colnames(gini)
states <- states[2:29]
class(states)
for (state in states){
print(head(state,1))
}
for (state in states){
head(state,1)
}
for (state in states){
head(state,2)
}
for (state in states){
head(state)
}
for (state in states){
print(state)
}
vector <- gini[, state]
for (state in states){
vector <- gini[, state]
print(vector)
}
ano <- Ano
ano
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
print(paste(state, result), quote = F)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
result_final <- apc(gini, result)
print(paste(state, result_final), quote = F)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
result_final <- apc(gini, result)
print(result_final)
# print(paste(result_final), quote = F)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
print(state)
result_final <- apc(gini, result)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
print(state, quote = F)
result_final <- apc(gini, result)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
print(state, quote = F)
apc(gini, result)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
print(state, quote = F)
# apc(gini, result)
}
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
# result <- summary(pw)
# print(state, quote = F)
# apc(gini, result)
}
?prais_winsten
pw<- prais_winsten(gini$Amapa ~ gini$Ano)
result <- summary(pw)
Amapa <- apc(gini, result)
pw<- prais_winsten(gini$Amapa ~ gini$Ano)
result <- summary(pw)
Amapa <- apc(gini, result)
result <- summary(pw)
Amapa
pw<- prais_winsten(gini$Amapa ~ gini$Ano)
for (state in states){
vector <- gini[, state]
ano <- Ano
pw<- prais_winsten(vector ~ ano)
result <- summary(pw)
print(state, quote = F)
apc(gini, result)
}
