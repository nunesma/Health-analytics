install.packages(c("CDM", "DescTools", "fansi", "icd", "ipred", "JuliaCall", "lme4", "mirt", "pkgconfig", "processx", "rattle", "RcppArmadillo", "rlang", "rpart.plot", "sandwich", "stringi"))
install.packages(c("icd", "lme4", "stringi"))
install.packages(c("icd", "lme4", "stringi", "VGAM", "XML"))
install.packages(c("callr", "car", "chron", "clue"))
install.packages(c("digest", "doBy", "Epi", "epiR"))
install.packages(c("jomo", "later", "lme4", "micemd", "plotrix", "R.rsp"))
install.packages(c("R.utils", "stringi", "VGAM", "wordcloud", "XML"))
install.packages(c("stringi", "tinytex", "xtable", "xts"))
install.packages(c("digest", "icd", "plotmo", "pls", "stringi", "xts"))
install.packages(c("ape", "asbio", "carData", "CDM", "cli", "commonmark"))
install.packages(c("CDM", "commonmark", "covr", "data.table", "digest", "expm", "flexclust", "htmlwidgets"))
install.packages(c("later", "lavaan", "magic", "maptools", "MCMCpack", "miceadds", "nloptr"))
install.packages(c("OpenMx", "optimx", "pkgbuild", "pROC", "robustbase", "semTools"))
install.packages(c("spData", "stringi", "TAM", "TTR", "units", "webshot", "xts", "zoo"))
install.packages(c("CDM", "commonmark", "data.table", "nloptr", "stringi", "TAM"))
install.packages(c("antiword", "CDM", "coda", "commonmark", "data.table", "digest", "evaluate", "fansi", "gamlss", "gamlss.data", "gamlss.dist", "magick", "mime", "nloptr", "OpenMx", "plotrix", "pmml", "R6", "Rcpp", "rstudioapi", "rticles", "StanHeaders", "stringi", "TAM"))
install.packages(c("digest", "rticles", "stringi"))
install.packages(c("digest", "rticles", "stringi", "sysfonts", "tidyselect"))
install.packages(c("digest", "stringi", "sysfonts", "tidyselect"))
setwd("C:/Users/nunes/AI/ml/Health-analytics/med_std/explore")
# banco = read.csv("def1.csv")
def = read.csv("def.csv")
banco <- subset(def, status == "ATIVO" | status == "CONCLUÍDO" | status == "FORMANDO")
# Preparing dataset
banco$sex <- ifelse(banco$sexo == "F","Female","Male"); banco$sex <- as.factor(banco$sex)
banco$Sergipe <- ifelse(banco$uf_naturalidade == "SE","Yes","No"); banco$Sergipe <- as.factor(banco$Sergipe)
banco$concluded <- ifelse(banco$status == "CONCLUÍDO","Yes","No"); banco$concluded <- as.factor(banco$concluded)
banco$quotas <- ifelse(banco$ano_ingresso >= 2010 & (banco$cota=="B"|banco$cota=="C"|banco$cota=="D1"|banco$cota=="D2"|
banco$cota=="D3"|banco$cota=="D4"|banco$cota=="E"|
banco$cota=="F"|banco$cota=="G"|banco$cota=="H"|
banco$cota=="I"|banco$cota=="PD"),"Yes","No")
banco$periodo_ingresso <- banco$periodo_ingresso * 0.1
banco$quotas <- as.factor(banco$quotas)
banco$entry_semester <- banco$ano_ingresso + banco$periodo_ingresso
banco$quit2 <- banco$CANCELADO + banco$DESISTENCIA + banco$EXCLUIDA + banco$TRANCADO
banco$aproved <- banco$APROVADO + banco$DISPENSADO
banco$quit1 <- banco$TRANCADO
banco$reproved <- banco$REP..FALTA + banco$REPROVADO + banco$REPROVADO.POR.MÉDIA.E.POR.FALTAS
banco$equivalence <- banco$DISPENSADO
banco <- banco[c("matricula", "nome", "Idade_no_ingresso", "ano_ingresso", "entry_semester", "ano_integralizacao","sex", "Sergipe", "uf_naturalidade", "pais_naturalidade", "quotas", "n_periodos", "nota_med", "aproved", "reproved", "equivalence", "quit1", "quit2", "concluded")]
colnames(banco) <- c("registration", "name", "admission_age", "entry_year", "entry_semester",  "conclusion_year",
"sex", "Sergipe", "naturalness", "nationality", "quotas", "n_periods", "avg_note", "aproved",
"reproved", "equivalence", "quit1", "quit2", "concluded")
library(FSA)
library(reshape)
install.packages(c("compareGroups", "devtools", "FSA", "ggplot2", "JuliaCall", "lattice", "MASS", "miceadds", "ModelMetrics", "pacman", "pkgload", "psych", "remotes", "reshape", "rgeos", "rlang", "rpart.plot", "sf", "shiny", "stringi", "survival", "tidyr", "tinytex", "vegan", "xfun"))
install.packages(c("lattice", "ModelMetrics"))
sex_series <- data.frame(table(banco$entry_semester,banco$sex))
sex_series <- cast(sex_series, Var1 ~ Var2, value = 'Freq')
sex_series$Var1 <- as.numeric(sex_series$Var1)
plot(sex_series$Female ~ sex_series$Var1, type = 'l', ylim = c(0,50))
str(sex_series)
sex_series <- cast(sex_series, Var1 ~ Var2, value = 'Freq')
library(reshape)
sex_series <- cast(sex_series, Var1 ~ Var2, value = 'Freq')
sex_series$Var1 <- as.numeric(sex_series$Var1)
plot(sex_series$Female ~ sex_series$Var1, type = 'l', ylim = c(0,50))
str(sex_series)
table(sex_series$Var1)
sex_series <- data.frame(table(banco$entry_semester,banco$sex))
sex_series <- cast(sex_series, Var1 ~ Var2, value = 'Freq')
sex_series
sex_series$sem <- as.numeric(as.character(sex_series$Var1))
sex_series
str(sex_series)
table(sex_series$sem)
sex_series$male <- sex_series$Male/(sex_series$Male + sex_series$Female)
sex_series
sex_series$female <- sex_series$Female/(sex_series$Male + sex_series$Female)
sex_series
plot(sex_series$female ~ sex_series$sem, type = 'l', ylim = c(0,50))
plot(sex_series$female ~ sex_series$sem, type = 'l', ylim = c(0,1))
?movavg
grid() # Draw gridlines
f2 <- rep(1/2, 2)
f2
y_lag <- filter(sex_series$female, f2, sides=1)
lines(x, y_lag, col="red")
# plot(sex_series$Female ~ sex_series$Var1, type = 'l', ylim = c(0,50))
plot(sex_series$female, sex_series$sem, type = 'l', ylim = c(0,1))
# plot(sex_series$Female ~ sex_series$Var1, type = 'l', ylim = c(0,50))
plot(sex_series$female ~ sex_series$sem, type = 'l', ylim = c(0,1))
grid() # Draw gridlines
lines(sex_series$sem, y_lag, col="red")
f3 <- rep(1/3, 3)
f4 <- rep(1/4, 4)
y_lag3 <- filter(sex_series$female, f3, sides=1)
y_lag4 <- filter(sex_series$female, f4, sides=1)
lines(sex_series$sem, y_lag3, col="green")
lines(sex_series$sem, y_lag4, col="blue")
?plot
lines(sex_series$sem, y_lag4, col="blue", lwd = 10) # calculating a moving average
lines(sex_series$sem, y_lag4, col="blue", lwd = 6) # calculating a moving average
# plot(sex_series$Female ~ sex_series$Var1, type = 'l', ylim = c(0,50))
plot(sex_series$female ~ sex_series$sem, type = 'l', ylim = c(0,1), lwd = 6)
lines(sex_series$sem, y_lag4, col="blue", lwd = 6) # calculating a moving average
install.packages("prais", dependencies = T)
?prais
?log
sex_series$log_female <- log10(sex_series$female)
sex_series
library(prais)
pw<- prais.winsten(log_female ~ sem, sex_series)
pw<- prais_winsten(log_female ~ sem, sex_series)
sex_series$log_female <- log10(sex_series$female)
library(prais)
pw<- prais_winsten(log_female ~ sem, sex_series)
pw<- prais_winsten(sem ~ log_female, sex_series)
pw<- prais_winsten(sex_series$log_female ~ sem, sex_series)
pw<- prais_winsten(sex_series$log_female ~ sex_series$sem)
summary(pw)
qt(.025, 20)
qt(1 - .025, 20)
nrow(sex_series)
qt(1 - .025, 30)
estimate <- -0.004892
apc <- -1 + 10 ** estimate # anual percent change (Taxa de incremento anual)
apc <- -1 + 10 ** estimate; apc # anual percent change (Taxa de incremento anual)
t <- qt(1 - .025, nrow(sex_series))
se <- 0.003148
apc_minCI <- -1 + 10 ** (estimate - (t*SE)); apc_minCI
apc_minCI <- -1 + 10 ** (estimate - (t*se)); apc_minCI
apc_maxCI <- -1 + 10 ** (estimate + (t*se)); apc_maxCI
pw
pw$coefficients
pw$call
pw$rank
pw$model
ep <- summary(pw)
ep
ep$coefficients
ep$coefficients[0,0]
class(ep$coefficients)
ep$coefficients(1,1)
ep$coefficients[1,1]
ep$coefficients[2,2]
ep$fstatistic
estimate <- result$coefficients[2,2]
result <- summary(pw)
estimate <- result$coefficients[2,2]
estimate
estimate <- result$coefficients[1,2]
estimate
estimate <- result$coefficients[2,1]
estimate
getAnywhere(prais.winsten())
getAnywhere(prais_winsten())
ind_aproved <- data.frame(table(banco$entry_semester, banco$aproved))
ind_aproved
ind_aproved <- data.frame(tapply(banco$aproved, banco$entry_semester, mean))
ind_aproved
6.735849 * 11
6.735849 * 9
6.735849 * 8
11.375000* 7
16.833333 * 6
57/12
57/9
ind_aproved <- data.frame(tapply(banco$reproved, banco$entry_semester, mean))
ind_aproved
ind_aproved <- data.frame(tapply(banco$aproved, banco$entry_semester, mean))
ind_aproved
str(ind_aproved)
cor_aproved <- ind_aproved$tapply.banco.aproved..banco.entry_semester..mean./correction
correction <- c(12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
cor_aproved <- ind_aproved$tapply.banco.aproved..banco.entry_semester..mean./correction
cor_aproved
i_aproved <- data.frame(banco$entry_semester, cor_aproved)
i_aproved <- data.frame(get(banco$entry_semester), cor_aproved)
i_aproved <- data.frame(sex_series$sem, cor_aproved)
i_aproved
colnames(i_aproved) <- c("sem", "aproved")
i_aproved
str(i_aproved)
plot(sem ~ aproved, i_aproved)
plot(aproved ~ aproved, i_aproved)
plot(aproved ~ sem, i_aproved)
plot(aproved ~ sem, i_aproved, type = "l", ylim = c(0.0, 7.0))
